const FOO: i32 = {
    let mut _0: i32;                     // return place in scope 0 at src/main.rs:1:12: 1:15
    let mut _1: i32;                     // in scope 0 at src/main.rs:2:9: 2:50
    let mut _2: i32;                     // in scope 0 at src/main.rs:2:14: 2:49
    let mut _3: i32;                     // in scope 0 at src/main.rs:2:15: 2:26
    let mut _4: i32;                     // in scope 0 at src/main.rs:2:19: 2:26
    let mut _5: bool;                    // in scope 0 at src/main.rs:2:19: 2:26
    let mut _6: bool;                    // in scope 0 at src/main.rs:2:19: 2:26
    let mut _7: bool;                    // in scope 0 at src/main.rs:2:19: 2:26
    let mut _8: bool;                    // in scope 0 at src/main.rs:2:19: 2:26
    let mut _9: (i32, bool);             // in scope 0 at src/main.rs:2:15: 2:26
    let mut _10: i32;                    // in scope 0 at src/main.rs:2:29: 2:48
    let mut _11: i32;                    // in scope 0 at src/main.rs:2:29: 2:44
    let mut _12: i32;                    // in scope 0 at src/main.rs:2:29: 2:39
    let mut _13: (i32, bool);            // in scope 0 at src/main.rs:2:29: 2:39
    let mut _14: (i32, bool);            // in scope 0 at src/main.rs:2:29: 2:44
    let mut _15: bool;                   // in scope 0 at src/main.rs:2:29: 2:48
    let mut _16: bool;                   // in scope 0 at src/main.rs:2:29: 2:48
    let mut _17: bool;                   // in scope 0 at src/main.rs:2:29: 2:48
    let mut _18: bool;                   // in scope 0 at src/main.rs:2:29: 2:48
    let mut _19: (i32, bool);            // in scope 0 at src/main.rs:2:14: 2:49
    let mut _20: (i32, bool);            // in scope 0 at src/main.rs:2:9: 2:50
    let mut _21: (i32, bool);            // in scope 0 at src/main.rs:2:5: 2:50

    bb0: {
        StorageLive(_1);                 // scope 0 at src/main.rs:2:9: 2:50
        StorageLive(_2);                 // scope 0 at src/main.rs:2:14: 2:49
        StorageLive(_3);                 // scope 0 at src/main.rs:2:15: 2:26
        StorageLive(_4);                 // scope 0 at src/main.rs:2:19: 2:26
        _5 = Eq(const 3_i32, const 0_i32); // scope 0 at src/main.rs:2:19: 2:26
        assert(!move _5, "attempt to calculate the remainder of `{}` with a divisor of zero", const 7_i32) -> [success: bb1, unwind: bb11]; // scope 0 at src/main.rs:2:19: 2:26
    }

    bb1: {
        _6 = Eq(const 3_i32, const -1_i32); // scope 0 at src/main.rs:2:19: 2:26
        _7 = Eq(const 7_i32, const i32::MIN); // scope 0 at src/main.rs:2:19: 2:26
        _8 = BitAnd(move _6, move _7);   // scope 0 at src/main.rs:2:19: 2:26
        assert(!move _8, "attempt to compute the remainder of `{} % {}`, which would overflow", const 7_i32, const 3_i32) -> [success: bb2, unwind: bb11]; // scope 0 at src/main.rs:2:19: 2:26
    }

    bb2: {
        _4 = Rem(const 7_i32, const 3_i32); // scope 0 at src/main.rs:2:19: 2:26
        _9 = CheckedSub(const 1_i32, _4); // scope 0 at src/main.rs:2:15: 2:26
        assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", const 1_i32, move _4) -> [success: bb3, unwind: bb11]; // scope 0 at src/main.rs:2:15: 2:26
    }

    bb3: {
        _3 = move (_9.0: i32);           // scope 0 at src/main.rs:2:15: 2:26
        StorageDead(_4);                 // scope 0 at src/main.rs:2:25: 2:26
        StorageLive(_10);                // scope 0 at src/main.rs:2:29: 2:48
        StorageLive(_11);                // scope 0 at src/main.rs:2:29: 2:44
        StorageLive(_12);                // scope 0 at src/main.rs:2:29: 2:39
        _13 = CheckedSub(const 4_i32, const -6_i32); // scope 0 at src/main.rs:2:29: 2:39
        assert(!move (_13.1: bool), "attempt to compute `{} - {}`, which would overflow", const 4_i32, const -6_i32) -> [success: bb4, unwind: bb11]; // scope 0 at src/main.rs:2:29: 2:39
    }

    bb4: {
        _12 = move (_13.0: i32);         // scope 0 at src/main.rs:2:29: 2:39
        _14 = CheckedMul(_12, const 17_i32); // scope 0 at src/main.rs:2:29: 2:44
        assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", move _12, const 17_i32) -> [success: bb5, unwind: bb11]; // scope 0 at src/main.rs:2:29: 2:44
    }

    bb5: {
        _11 = move (_14.0: i32);         // scope 0 at src/main.rs:2:29: 2:44
        StorageDead(_12);                // scope 0 at src/main.rs:2:43: 2:44
        _15 = Eq(const 3_i32, const 0_i32); // scope 0 at src/main.rs:2:29: 2:48
        assert(!move _15, "attempt to divide `{}` by zero", _11) -> [success: bb6, unwind: bb11]; // scope 0 at src/main.rs:2:29: 2:48
    }

    bb6: {
        _16 = Eq(const 3_i32, const -1_i32); // scope 0 at src/main.rs:2:29: 2:48
        _17 = Eq(_11, const i32::MIN);   // scope 0 at src/main.rs:2:29: 2:48
        _18 = BitAnd(move _16, move _17); // scope 0 at src/main.rs:2:29: 2:48
        assert(!move _18, "attempt to compute `{} / {}`, which would overflow", _11, const 3_i32) -> [success: bb7, unwind: bb11]; // scope 0 at src/main.rs:2:29: 2:48
    }

    bb7: {
        _10 = Div(move _11, const 3_i32); // scope 0 at src/main.rs:2:29: 2:48
        StorageDead(_11);                // scope 0 at src/main.rs:2:47: 2:48
        _19 = CheckedAdd(_3, _10);       // scope 0 at src/main.rs:2:14: 2:49
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _10) -> [success: bb8, unwind: bb11]; // scope 0 at src/main.rs:2:14: 2:49
    }

    bb8: {
        _2 = move (_19.0: i32);          // scope 0 at src/main.rs:2:14: 2:49
        StorageDead(_10);                // scope 0 at src/main.rs:2:48: 2:49
        StorageDead(_3);                 // scope 0 at src/main.rs:2:48: 2:49
        _20 = CheckedAdd(const 1_i32, _2); // scope 0 at src/main.rs:2:9: 2:50
        assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_i32, move _2) -> [success: bb9, unwind: bb11]; // scope 0 at src/main.rs:2:9: 2:50
    }

    bb9: {
        _1 = move (_20.0: i32);          // scope 0 at src/main.rs:2:9: 2:50
        StorageDead(_2);                 // scope 0 at src/main.rs:2:49: 2:50
        _21 = CheckedSub(const 1_i32, _1); // scope 0 at src/main.rs:2:5: 2:50
        assert(!move (_21.1: bool), "attempt to compute `{} - {}`, which would overflow", const 1_i32, move _1) -> [success: bb10, unwind: bb11]; // scope 0 at src/main.rs:2:5: 2:50
    }

    bb10: {
        _0 = move (_21.0: i32);          // scope 0 at src/main.rs:2:5: 2:50
        StorageDead(_1);                 // scope 0 at src/main.rs:2:49: 2:50
        return;                          // scope 0 at src/main.rs:1:1: 3:3
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at src/main.rs:1:1: 3:3
    }
}
